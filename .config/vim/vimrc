" VIMRC

" XDG Compliance
" Keeps vim and neovim mostly compatible
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after
set runtimepath+=$XDG_DATA_HOME/vim
set packpath^=$XDG_DATA_HOME/vim
let g:netrw_home = $XDG_DATA_HOME."/vim"
set backupdir=$XDG_CACHE_HOME/vim/backup
set directory=$XDG_CACHE_HOME/vim/swap
set undodir=$XDG_CACHE_HOME/vim/undo
set viewdir=$XDG_CACHE_HOME/vim/view

if !has('nvim') " Neovim has its own location which already complies with XDG specification
		" and because it uses a different file format, it is
		" incompatible with regular vim.
  set viminfofile=$XDG_CACHE_HOME/vim/viminfo
endif

" General
set title 		" Show title in terminal
set cursorline		" Highlight entire selected line
set showcmd		" Show commands (bottom-right corner)
set linebreak		" Linebreak (wrap lines around spaces, not the middle of words)
set incsearch   	" Real-time searching/matching
set hlsearch		" Highlight all matches
set ic 			" Case-insensitive matching
set smartcase		" Partial matching
"set inccommand=split   " Disable live substitution
set display=truncate    " When part of a line is off-screen, truncate that part instead of the whole line
set number relativenumber " Line-counter and relative line-counter 	https://vim.fandom.com/wiki/Display_line_numbers  https://stackoverflow.com/questions/313463/storing-vim-settings-with-a-document#313466 (last solution)
"set mouse=		" Disable mouse
"set laststatus=1	" Remove redundant status bar
set clipboard=unnamedplus " Clipboard
set tw=60		" match gqq char size w/ font I use
filetype detect		" Detect filetype syntax
filetype indent on 	" Smart indentation

" Colorscheme
" Done with a function to fix an issue with Goyo
" https://github.com/junegunn/goyo.vim/issues/84#issuecomment-156299446
function! s:tweak_colors()
    "colorscheme unokai	" Colorscheme
    hi Normal guibg=NONE ctermbg=NONE " Don't change the background color of the terminal
endfunction
autocmd! ColorScheme unokai call s:tweak_colors()

colorscheme unokai


" Re-opening a file in the exact line it was closed
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
      \| exe "normal! g'\"" | endif
      endif

" Spell checking
nnoremap <C-s> :setlocal spell! spelllang=es,en_us,de<Enter>
inoremap <C-s> <Esc>:set spell! spelllang=es,en_us,de<Enter>a

" Shortcuts

" make mark navigation easier in LATAM keyboard
nnoremap ' `
nnoremap , '

" Moving through the same line with gj gk as if they were different lines, bound
" to <C-j> <c-k>
nnoremap <C-j> gj
nnoremap <C-k> gk
vnoremap <C-j> gj
vnoremap <C-k> gk

" Delete previous word quickly [Ctrl+Backspace]
inoremap <C-h> <C-\><C-o>db


" Plug-in support

" https://vonheikemen.github.io/devlog/tools/installing-neovim-plugins-without-a-plugin-manager/
set packpath^=$XDG_CONFIG_HOME/vim/plugins/

call plug#begin('~/.config/vim/plugins')
    Plug 'vimwiki/vimwiki'
    Plug 'ap/vim-css-color'
    Plug 'junegunn/goyo.vim'
    Plug 'elkowar/yuck.vim'
    Plug 'nvim-tree/nvim-web-devicons'
call plug#end()

" Goyo config
let g:goyo_width = 60
nnoremap <A-b> :Goyo<Enter>
inoremap <A-b> <Esc>:Goyo<Enter>a

" VimWiki config
source $XDG_CONFIG_HOME/vim/indices.vim		" personal file with every index file I use

" (make rendermarkdown.nvim compatible with vimwiki)
 if has('nvim')
    lua require('render-markdown').setup({file_types = { 'markdown', 'vimwiki' }, })
    lua vim.treesitter.language.register('markdown', 'vimwiki')
endif


" Filetype-specific settings

" Markdown
autocmd FileType markdown imap  <C-b> ****<Esc>hi

" HTML
autocmd FileType html setlocal ts=4 sw=4 expandtab
autocmd FileType html map  <buffer> <F5> :w<Enter>:exec '!librewolf' shellescape(@%, 1)<Enter>
autocmd FileType html imap  <buffer> <F5> :w<Enter>:exec '!librewolf' shellescape(@%, 1)<Enter>

autocmd FileType html inoremap ;it <i></i><Esc>hhhi
autocmd FileType html inoremap ;bf <b></b><Esc>hhhi
autocmd FileType html inoremap ;em <em></em><Esc>hhhhi
autocmd FileType html inoremap ;url <a href=''></a><Esc>hhhi
autocmd FileType html inoremap ;h1 <h1></h1><Esc>hhhhi
autocmd FileType html inoremap ;h2 <h2></h2><Esc>hhhhi
autocmd FileType html inoremap ;h3 <h3></h3><Esc>hhhhi
autocmd FileType html inoremap ;p <p></p><Esc>hhhi
autocmd FileType html inoremap ;jp <p class="j"></p><Esc>hhhi
autocmd FileType html inoremap ;cimg <em></em><Esc>hhhhi

" LaTeX
autocmd FileType tex setlocal ts=4 sw=4 expandtab
autocmd FileType tex map  <buffer> <F5> :w<Enter>:exec '!pdflatex' shellescape(@%, 1)<Enter>
autocmd FileType tex imap <buffer> <F5> <Esc>:w<Enter>:exec '!pdflatex' shellescape(@%, 1)<Enter>
autocmd FileType tex map  <buffer> <F4> :w<Enter>:exec '!lualatex' shellescape(@%, 1)<Enter>
autocmd FileType tex imap <buffer> <F4> <Esc>:w<Enter>:exec '!lualatex' shellescape(@%, 1)<Enter>

autocmd FileType tex inoremap ;it \textit{
autocmd FileType tex inoremap ;bf \textbf{
autocmd FileType tex inoremap ;tt \texttt{

autocmd FileType tex inoremap ;sec \section{<Esc>o<Esc>kA
autocmd FileType tex inoremap ;*sec \section*{
autocmd FileType tex inoremap ;sub \subsection{
autocmd FileType tex inoremap ;*sub \subsection*{
autocmd FileType tex inoremap ;mize \begin{itemize}<Enter><Enter>\end{itemize}<Esc>kI
autocmd FileType tex inoremap ;num \begin{enumerate}<Enter><Enter>\end{enumerate}<Esc>kI

"autocmd FileType tex imap <C-i> \textit{}<Esc>i
"autocmd FileType tex imap <C-i> \textit{
" <C-i> is the same code use for tabbing.
" See https://superuser.com/questions/770068/in-vim-how-can-i-remap-tab-without-also-remapping-ctrli
autocmd FileType tex inoremap <C-o> \textit{
autocmd FileType tex inoremap ;it \textit{
autocmd FileType tex inoremap ;bf \textbf{

" R
autocmd Filetype r map  <buffer> <F5> :w<Enter>:exec '!Rscript' shellescape(@%, 1)<Enter>
autocmd FileType r imap <buffer> <F5> <Esc>:w<Enter>:exec '!Rscript' shellescape(@%, 1)<Enter>

" R Markdown
autocmd BufRead,BufNewFile *.Rmd imap <C-r> ```{r}<Enter>```<Esc>O
autocmd BufRead,BufNewFile *.Rmd map  <buffer> <F5> :w<Enter>:!Rscript -e "rmarkdown::render('%:p', output_format = 'pdf_document')"<CR>
autocmd BufRead,BufNewFile *.Rmd imap <buffer> <F5> <Esc>:w<Enter>:!Rscript -e "rmarkdown::render('%:p', output_format = 'pdf_document')"<CR>

" Python https://stackoverflow.com/questions/18948491/running-python-code-in-vim
autocmd FileType python map  <buffer> <F5> :w<Enter>:exec '!st python -i' shellescape(@%, 1)<Enter>
autocmd FileType python imap <buffer> <F5> <Esc>:w<Enter>:exec '!st python -i' shellescape(@%, 1)<Enter>

" JavaScript
autocmd FileType javascript map  <buffer> <F5> :w<Enter>:exec '!node' shellescape(@%, 1)<Enter>
autocmd FileType javascript imap <buffer> <F5> <Esc>:w<Enter>:exec '!node' shellescape(@%, 1)<Enter>

" C
autocmd FileType c map  <buffer> <F5> :w<Enter>:exec '!gcc' shellescape(@%, 1)<Enter>
autocmd FileType c imap <buffer> <F5> <Esc>:w<Enter>:exec '!gcc' shellescape(@%, 1)<Enter>

" C++
autocmd FileType cpp map  <buffer> <F5> :w<Enter>:exec '!g++' shellescape(@%, 1)<Enter>
autocmd FileType cpp imap <buffer> <F5> <Esc>:w<Enter>:exec '!g++' shellescape(@%, 1)<Enter>

" CSS
autocmd FileType css setlocal ts=2 sw=2 expandtab

